
************************************************** LOCATORS NOTES ***********************************************

* General locator concepts
	- Every object may not have ID, name and className locators, so Xpath and CSS are preferred to be used as locators. 
	- Multiple objects with the same locator value: Selenium identifies only the first one (Scan: Top Left -> Bottom Right)
		driver.findElement(By.className("inputText")).sendKeys("Email"); --> Fills this one, as it is find before the next one.
		driver.findElement(By.className("inputText")).sendKeys("Password"); --> Is not filled, as it is find the previous one before.

* By.id
	- Alpha numeric id ("0-2-e"), may vary every page refresh, so the ID locator is not recommended in this case.
		driver.findElement(By.id("0-2-e")).sendKeys("Email");
* By.linkText
	- linkText locator can be used when the supposed link has anchor "a" tag ("<a ...")   
* By.className
	- Classes should not have spaces. Compound classes cannot be accepted.
	
* By.xPath 
	- Double quotes inside double quotes are not accepted. They must be changed with simple quotes. 
		//*[@id="Login"] --> //*[@id='Login']
		driver.findElement(By.xpath("//*[@id="Login"]")).click();  --> Wrong
		driver.findElement(By.xpath("//*[@id='Login']")).click();  --> Right
	- Xpath can be defined in n number of ways
		- Object right-click: Copy xPath (In all the browsers)		
		- Xpath plugin (In Firefox only)(FirePath plugin deprecated)(You can access to it if you degrade the browser to less firefox 55)
		  (Not recommended)
	- Validate XPath (Chrome and Firefox): 
		1. Copy Xpath with simple quote inside the next doble quotes:   $x("") 
			Example --> $x("//*[@id='forgot_password_link']")
		2. Go to the tab "Console" and copy it inside.
		3. When you click on it, an array message is generated: (Array [ a#forgot_password_link.fl.small ])
		4. Move the mouse over it:
			- If the object is blue highlighted, means that the xPath is correct. 
			- If the response is null(Chrome) or Uncaught Error (Firefox), means that the xPath is wrong. 
		  
	- Firefox sometimes is not reliable in giving XPath (For example when it starts with "/html").
		Example (Wrong case) -->  /html/body/div[1]/div[3]/div/div/div/div/div[2]/form/table/tbody/tr[3]/td[2]/div/a
		Example (Right case) -->  //*[@id="login_form"]/table/tbody/tr[3]/td[2]/div/a
		
	- Create xPath from HTML attributes:
		1. Right-click on the HTML object and select "Copiar -> HTML externo"
		2. With the HTML information create the xpath:      //tagname[@attribute='value']
			HTML        => <input class="input r4 wide mb16 mt8 username" value="" name="username" id="username" aria-describedby="error" style="display: block;" type="email">
			xPath       => //input[@type='email'] 
		3. Validation  => $x("//input[@type='email']")   or   $x("//*[@type='email']")
			(Sometimes console validation fails despite the xpath is right) 
	- Create xPath with regular expression: It is used when the value is not static (Alphanumeric),when it is very long or when you just want
	  to use part of the word.
		Format  => //tagName[contains(@attribute,'value')]
		Example => input<name="username123">  -->   //input[contains(@name,'username')]         =>  (Note:username is the static part)
		Example => input<name="username very long">  -->   //input[contains(@name,'username')]  =>  (Note:username is the static part)
		Example => input<name="username">  -->   //input[contains(@name,'user')] 				=>  (Note:user is the a part of the static word)
	- Parent child relationship xPath: This relationship is used when a tagName has not any attribute with static values. 
	  You create a parent xpath and go down over their childs to locate the tagName you want.
	  Example => //div[@class='lst-c']/div/div[2]/div/input
	  				/div/div[2]/div/input -> Three childs
	  				div[2] -> Identifies the second div tagName in a same level whwre there are two div.
	- Chropath plugin:
		- Plugin used to get XPath. It might disappear in future.
		- Useful to validate xPath and number of node matches.
		
* By.cssSelector
	- Firefox (starts with "#")
	- Chrome does not have the copy option, so you have to search in the bottom toolbar the text which makes the background
	  field turns blue when you click on it.  
	  (Click on it and then select "Properties" tab to copy it)
	- Validate cssSelector (Chrome and Firefox):  
		1. Copy cssSelector inside the next doble quotes:   $("") 
			Example --> $("#mydomainLink")
		2. Go to the tab "Console" and copy it inside.
		3. When you click on it, a message is generated: (<a id="mydomainLink"...)
		4. Move the mouse over it:
			- If the object is blue highlighted, means that the cssSelector is correct. 
			- If the response is null, means that the cssSelector is wrong. 		
			
	- Create cssSelector from HTML attributes:
		1. Right-click on the HTML object and select "Copiar -> HTML externo"
		2. With the HTML information create the cssSelector:      tagName[attribute='value'] or   *[attribute='value']   or   [attribute='value']   or  tagName#id or  #id  or  tagName.classname
			HTML        => <input class="input r4 wide mb16 mt8 username" value="" name="username" id="username" aria-describedby="error" style="display: block;" type="email">
			cssSelector => input[type='email'] 
		3. Validation  => $("input[type='email']")   or   $("*[type='email']")   or   $("[type='email']")   or    input#username (Only if exists id atrribute)
			(Sometimes console validation fails despite the xpath is right) 
			
	- Create cssSelector with regular expression: It is used when the value is not static (Alphanumeric) or it is very long.
		Format  => tagName[attribute*='value']
		Example => input<name="username123">  -->   input[name*='username']         =>  (Note:username is the static part)
		Example => input<name="username very long">  -->   input[name*='username']  =>  (Note:username is the static part)
		Example => input<name="username">  -->   input[name*='user']                =>  (Note:user is the a part of the static word)
		
		











